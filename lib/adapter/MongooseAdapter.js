// Generated by CoffeeScript 1.6.3
"use strict";
var Base, MongooseAdapter, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require("./Base");

_ = require('underscore');

/*
@type rest.adapter.MongooseAdapter
@param {Object} model
@param {string} name
*/


MongooseAdapter = (function(_super) {
  __extends(MongooseAdapter, _super);

  function MongooseAdapter(model, name) {
    if (name == null) {
      name = "model";
    }
    MongooseAdapter.__super__.constructor.apply(this, arguments);
  }

  MongooseAdapter.prototype.findAll = function(params, callback) {
    var json;
    json = _.extend({}, params);
    return this._model.find(json, callback);
  };

  MongooseAdapter.prototype.find = function(id, callback) {
    return this._model.findById(id, callback);
  };

  MongooseAdapter.prototype.create = function(raw, callback) {
    var model;
    model = new this._model(raw);
    return model.save(callback);
  };

  MongooseAdapter.prototype.update = function(id, raw, callback) {
    var data,
      _this = this;
    data = (function() {
      var json;
      json = _.extend({}, raw);
      delete json._id;
      return json;
    })();
    return this.getModel().findByIdAndUpdate(id, data, {}, callback);
  };

  MongooseAdapter.prototype["delete"] = function(id, callback) {
    return this.getModel().findByIdAndRemove(id, {}, callback);
  };

  return MongooseAdapter;

})(Base);

module.exports = MongooseAdapter;

/*
//@ sourceMappingURL=MongooseAdapter.map
*/
