// Generated by CoffeeScript 1.7.1
"use strict";
var Base, MongoDBAdapter, ObjectID, error, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require("./Base");

_ = require('underscore');

try {
  ObjectID = require("mongodb").ObjectID;
} catch (_error) {
  error = _error;
  console.log(error);
}


/*
MongoDB adapter
 */

MongoDBAdapter = (function(_super) {
  __extends(MongoDBAdapter, _super);


  /*
  @type rest.adapter.MongoDBAdapter
  @param {mongodb.Collection} collection mongodb collection
  @param {string} name name of the model
   */

  function MongoDBAdapter(collection, name) {
    if (name == null) {
      name = "model";
    }
    MongoDBAdapter.__super__.constructor.apply(this, arguments);
  }

  MongoDBAdapter.prototype.findAll = function(params, callback) {
    var json;
    json = _.extend({}, params);
    return this._model.find(json, function(e, cursor) {
      if (e) {
        return callback(e);
      } else {
        return cursor.toArray(function(e, docs) {
          if (e) {
            return callback(e);
          } else {
            return callback(void 0, docs);
          }
        });
      }
    });
  };

  MongoDBAdapter.prototype.find = function(id, callback) {
    if (!id instanceof ObjectID) {
      id = ObjectID(id);
    }
    return this._model.findOne({
      _id: id
    }, callback);
  };

  MongoDBAdapter.prototype.create = function(raw, callback) {
    return this._model.save(raw, {
      safe: true
    }, callback);
  };

  MongoDBAdapter.prototype.update = function(id, raw, callback) {
    var data;
    if (!id instanceof ObjectID) {
      id = ObjectID(id);
    }
    data = (function(_this) {
      return function() {
        var json;
        json = _.extend({}, raw);
        delete json._id;
        return json;
      };
    })(this)();
    return this.getModel().findAndModify({
      _id: id
    }, [['_id', 1]], {
      $set: data
    }, {
      'new': true
    }, callback);
  };

  MongoDBAdapter.prototype["delete"] = function(id, callback) {
    if (!id instanceof ObjectID) {
      id = ObjectID(id);
    }
    return this.getModel().remove({
      _id: id
    }, {
      safe: true
    }, callback);
  };

  return MongoDBAdapter;

})(Base);

module.exports = MongoDBAdapter;

//# sourceMappingURL=MongoDBAdapter.map
