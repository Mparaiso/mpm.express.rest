// Generated by CoffeeScript 1.7.1
"use strict";
var Base, TestAdapter, findIndex, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Base = require("./Base");

_ = require("underscore");


/*
return the index of an element according to a predicate 
@param  {Array}   collection 
@param  {Function} callback   
@return {Number}  the index of the object or -1 if not found
 */

findIndex = function(collection, callback) {
  var doc, i, index, _i, _len;
  i = -1;
  for (index = _i = 0, _len = collection.length; _i < _len; index = ++_i) {
    doc = collection[index];
    if (callback(doc, index, collection)) {
      i = index;
      break;
    }
  }
  return i;
};


/*
TestAdapter
 */

TestAdapter = (function(_super) {
  __extends(TestAdapter, _super);

  function TestAdapter() {
    TestAdapter.__super__.constructor.apply(this, arguments);
  }

  TestAdapter.prototype.getModel = function() {
    return this._model;
  };

  TestAdapter.prototype.setModel = function(_model) {
    this._model = _model;
  };

  TestAdapter.prototype.getName = function() {
    return this._name;
  };

  TestAdapter.prototype.setName = function(_name) {
    this._name = _name;
  };


  /*
  findAll resources
  @param  {Object}   params   
  @param  {Function} callback
   */

  TestAdapter.prototype.findAll = function(params, callback) {
    var c;
    c = this._model.filter((function(_this) {
      return function(doc) {
        var key, value, _i, _len;
        for (value = _i = 0, _len = params.length; _i < _len; value = ++_i) {
          key = params[value];
          if (_this._model[key] !== value) {
            return false;
          }
        }
        return true;
      };
    })(this));
    return callback(void 0, c);
  };


  /*
  find resource
  @param  {String|Number}   id       
  @param  {Function} callback
   */

  TestAdapter.prototype.find = function(id, callback) {
    return callback(void 0, (this._model.filter((function(_this) {
      return function(doc) {
        return doc.id === id;
      };
    })(this)))[0]);
  };


  /*
  create resource
  @param  {Object}   raw     
  @param  {Function} callback
   */

  TestAdapter.prototype.create = function(raw, callback) {
    var r;
    r = _.extend(raw, {
      id: _.uniqueId()
    });
    this._model.push(r);
    return callback(void 0, r);
  };


  /*
  update resource
  @param  {String|Number}   id       
  @param  {Object}   raw      
  @param  {Function} callback
   */

  TestAdapter.prototype.update = function(id, raw, callback) {
    var i, r;
    i = findIndex(this._model, (function(_this) {
      return function(doc) {
        return doc.id === id;
      };
    })(this));
    if (i >= 0) {
      r = _.extend(this._model[i], raw, {
        id: id
      });
    }
    return callback(void 0, r);
  };


  /*
  delete resource
     	@param  {String|Number}   id       
     	@param  {Function} callback
   */

  TestAdapter.prototype["delete"] = function(id, callback) {
    var doc, i;
    i = findIndex(this._model, (function(_this) {
      return function(doc) {
        return doc.id === id;
      };
    })(this));
    if (i >= 0) {
      doc = this._model.splice(i, 1);
      return callback(void 0, i);
    } else {
      return callback();
    }
  };

  return TestAdapter;

})(Base);

module.exports = TestAdapter;

//# sourceMappingURL=TestAdapter.map
